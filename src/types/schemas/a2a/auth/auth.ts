import { SecuritySchemeBase } from "./base.js";
import { OAuthFlows } from "./oauth.js";

/**
 * @description API Key security scheme.
 * @required type
 * @required in
 * @required name
 */
export interface APIKeySecurityScheme extends SecuritySchemeBase {
  /**
   * @required Type of the security scheme.
   */
  type: "apiKey";

  /**
   * @required The location of the API key. Valid values are "query", "header", or "cookie".
   */
  in: "query" | "header" | "cookie";

  /**
   * @required The name of the header, query or cookie parameter to be used.
   */
  name: string;
}

/**
 * @description HTTP Authentication security scheme.
 * @required type
 * @required scheme
 * @optional bearerFormat
 */
export interface HTTPAuthSecurityScheme extends SecuritySchemeBase {
  /**
   * @required Type of the security scheme.
   */
  type: "http";

  /**
   * @required The name of the HTTP Authentication scheme to be used in the Authorization header as defined
   * in RFC7235. The values used SHOULD be registered in the IANA Authentication Scheme registry.
   * The value is case-insensitive, as defined in RFC7235.
   */
  scheme: string;

  /**
   * @optional A hint to the client to identify how the bearer token is formatted. Bearer tokens are usually
   * generated by an authorization server, so this information is primarily for documentation
   * purposes.
   */
  bearerFormat?: string;
}

/**
 * @description OAuth2 security scheme configuration.
 * @required type
 * @required flows
 * Mirrors the OpenAPI Security Scheme Object
 * (https://swagger.io/specification/#security-scheme-object)
 */
export interface OAuth2SecurityScheme extends SecuritySchemeBase {
  /**
   * @required Type of the security scheme.
   */
  type: "oauth2";

  /**
   * @required An object containing configuration information for the flow types supported.
   */
  flows: OAuthFlows;

  /**
   * @optional URL to the oauth2 authorization server metadata
   * [RFC8414](https://datatracker.ietf.org/doc/html/rfc8414). TLS is required.
   */
  oauth2MetadataUrl?: string;
}

/**
 * @description OpenID Connect security scheme.
 * @required type
 * @required openIdConnectUrl
 */
export interface OpenIdConnectSecurityScheme extends SecuritySchemeBase {
  /**
   * @required Type of the security scheme.
   */
  type: "openIdConnect";

  /**
   * @required Well-known URL to discover the [[OpenID-Connect-Discovery]] provider metadata.
   */
  openIdConnectUrl: string;
}

/**
 * @description Mutual TLS (mTLS) security scheme.
 * @required type
 */
export interface MutualTLSSecurityScheme extends SecuritySchemeBase {
  /**
   * @required Type of the security scheme.
   */
  type: "mutualTLS";
}

export type SecurityScheme =
  | APIKeySecurityScheme
  | HTTPAuthSecurityScheme
  | OAuth2SecurityScheme
  | OpenIdConnectSecurityScheme
  | MutualTLSSecurityScheme;
