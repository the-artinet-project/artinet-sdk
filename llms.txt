# Artinet SDK (@artinet/sdk) High-Level Summary

This project provides the **Artinet SDK**, a production-ready, feature-rich TypeScript library for building clients and servers compliant with the Agent2Agent (A2A) protocol. Developed by the Artinet Team, it aims to simplify A2A implementation by offering robust, easy-to-use components with a focus on developer experience and reliability, significantly enhancing the foundational concepts presented in the official A2A samples.

The SDK is distributed as the `@artinet/sdk` npm package.

## 1. Core Components & Purpose

*   **Purpose:** Enable developers to easily create A2A-compliant AI agent clients and servers in TypeScript/JavaScript environments.
*   **Target Audience:** Developers building AI agents or applications that need to communicate using the standardized A2A protocol.
*   **Key Modules:**
    *   **`@artinet/sdk/client`**: Provides `A2AClient` for interacting with A2A servers.
    *   **`@artinet/sdk/server`**: Provides `A2AServer` for implementing A2A agent endpoints.
    *   **`@artinet/sdk/types`**: Contains TypeScript interfaces for all A2A protocol structures derived from the official JSON schema, plus extended types for SDK usage (e.g., `TaskYieldUpdate`, `ServerDeploymentRequestParams`, `ClientProxy`, `TaskContext`).
    *   **`@artinet/sdk/transport`**: Handles underlying communication logic (JSON-RPC, SSE streaming).
    *   **`@artinet/sdk/utils`**: Includes common utilities, error definitions, logging integration, and deployment utilities.
        *   **`@artinet/sdk/agents`**: A sub-path providing the `artinet.v0` namespace with `taskManager`, `connect`, and `agent` for sandboxed/managed agent environments.

## 2. Features & Enhancements (vs. Basic A2A Samples)

*   **Production-Grade Server (`A2AServer`):**
    *   Built on **Express.js**, providing a robust and familiar foundation.
    *   Simplifies setup: Handles JSON-RPC request/response/error handling, SSE stream management, and routing automatically.
    *   Requires only a core `TaskHandler` (async generator function) for agent logic implementation.
    *   Manages task state transitions based on `TaskHandler` yields.
    *   Configurable Agent Card served automatically (`/.well-known/agent.json`).
    *   Integrated support for CORS configuration.
    *   Optional custom JSON-RPC server implementation via `createJSONRPCServer` factory function parameter.
    *   Corrected internal parameter name from `taskHandler` to `handler` for consistency, though `taskHandler` might have worked due to JS flexibility.
*   **Enhanced Client (`A2AClient`):**
    *   Reliable streaming support (`sendStreamingMessage`) using `eventsource-parser`.
    *   Convenience methods for capability checking (`supports`).
    *   Flexible header management for authentication (`addHeader`, `setHeaders`).
    *   Informative client-side error handling (`RpcError`).
*   **Developer Experience:**
    *   **Strong Typing:** Comprehensive TypeScript types for the entire A2A protocol and SDK interfaces.
    *   **Simplified APIs:** Abstracts protocol complexities for both client and server.
    *   **Structured Logging:** Integrated, configurable logging using `pino`. Defaults to `error` level, configurable via `configureLogger`.
    *   **Enhanced Context Handling:** New `ExecutionContext` interface for improved parameter management, with protocol-specific extensions (`MCPExecutionContext`, `NLWebExecutionContext`).
*   **Reliability & Testing:**
    *   **High Test Coverage:** (>95% reported) using Jest, covering core logic, streaming, error handling, push notification config, and edge cases.
    *   Standardized error classes (`A2AError`, `RpcError`) mapped to JSON-RPC error codes.
*   **Flexible Storage:**
    *   Pluggable `TaskStore` interface.
    *   Includes `InMemoryTaskStore` (default, for development/testing).
    *   Includes `FileStore` for basic file-based persistence. Easily extensible for custom database integrations.
*   **Code Deployment & Management (Alpha/Beta):**
    *   `bundle`: Utility to bundle agent code using `esbuild`.
    *   `taskHandlerProxy`, `fetchResponseProxy` (**DEPRECATED**): Older utilities to assist in creating deployable agent logic. Developers should migrate to `artinet.v0.taskManager` and `artinet.v0.connect`.
    *   **`artinet.v0.taskManager`**: Standard utility for agents in managed environments to interact with the host for task lifecycle management. Replaces `taskHandlerProxy`.
    *   **`artinet.v0.connect`**: Standard utility for agents in managed environments to make proxied calls to other agents or LLMs. Replaces `fetchResponseProxy`.
    *   **`artinet.v0.agent`**: Factory function for agents in managed environments to obtain a `ClientProxy` for type-safe, host-managed communication with other A2A services.
    *   `testDeployment`: Utility to test agent deployments in a sandboxed environment.
    *   `fullDeployment` (Beta): Utility to deploy bundled agent code and its `AgentCard` directly to the Artinet platform (requires `ARTINET_API_KEY`).
    *   New types: `ServerDeploymentRequestParams`, `ServerDeploymentResponse` in `src/types/extended-schema.ts`. New proxy-related types (`TaskProxy`, `TaskManagerProps`, `ConnectAPICallback`, `ClientProxy`, `ClientFactory`, etc.) in `src/types/proxy.ts`.
*   **Protocol Compliance:**
    *   Full implementation based on the official A2A JSON Schema (`a2a.json`).
    *   Supports core methods: `message/send`, `tasks/get`, `tasks/cancel`.
    *   Supports streaming method: `message/stream`.
    *   Supports push notification configuration methods: `tasks/pushNotificationConfig/set`, `tasks/pushNotificationConfig/get` (though full push *sending* logic might be agent-specific).
    *   Supports streaming resubscription: `tasks/resubscribe`.
    *   Agent registration now includes `tags: ["a2a"]`.
    *   Improved agent card fetching in client with URL validation and checks for card content.
    *   Registration attempts with localhost/empty URLs are now prevented.

## 3. Technical Details

*   **Language:** TypeScript
*   **Module System:** ES Modules (ESM) (`"type": "module"` in `package.json`). Requires Node.js >= 16 (Node.js 22 recommended).
*   **Build System:** Uses `tsc` to compile TypeScript to JavaScript in the `dist` directory.
*   **Exports:** Provides main SDK exports from `./dist/index.js` and agent utilities from `./dist/utils/deployment/agents.js` (accessible via `@artinet/sdk/agents`).
*   **Type Definitions:** Main type definitions are in `dist/types/index.d.ts`. Agent utility types are in `dist/utils/deployment/agents.d.ts`.
*   **File Structure Changes:**
    *   `src/client/interfaces/client.ts` moved to `src/types/client.ts`.
    *   `src/server/interfaces/context.ts` moved to `src/types/context.ts`.
    *   Schema definitions reorganized under `schemas/a2a` directory.
*   **Testing:** Jest (`ts-jest`).
*   **Linting:** ESLint with TypeScript-ESLint (Flat Config `eslint.config.js`).
*   **Core Dependencies:** `express`, `jayson` (for JSON-RPC server), `pino`, `eventsource-parser`, `cors`.

## 4. Usage (High-Level)

*   **Server:** Instantiate `A2AServer`, providing a `TaskHandler` async generator function and optionally a `TaskStore` and other configurations. Call `server.start()`.
*   **Client:** Instantiate `A2AClient` with the server's A2A endpoint URL. Use methods like `sendMessage`, `sendStreamingMessage`, `getTask`, `cancelTask`, `supports`.

## 5. Project Goals

*   Provide a reliable, easy-to-use, and fully-typed SDK for A2A development in the Node.js ecosystem.
*   Offer a more complete and production-oriented solution compared to basic protocol samples.
*   Encourage adoption of the A2A standard by lowering the barrier to implementation.
