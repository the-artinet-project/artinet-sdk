# Artinet SDK (@artinet/sdk) High-Level Summary

This project provides the **Artinet SDK**, a production-ready, feature-rich TypeScript library for building clients and servers compliant with the Agent2Agent (A2A) protocol. Developed by the Artinet Team, it aims to simplify A2A implementation by offering robust, easy-to-use components with a focus on developer experience and reliability.

The SDK is distributed as the `@artinet/sdk` npm package (current version: 0.5.6).

## 1. Core Components & Purpose

*   **Purpose:** Enable developers to easily create A2A-compliant AI agent clients and servers in TypeScript/JavaScript environments.
*   **Target Audience:** Developers building AI agents or applications that need to communicate using the standardized A2A protocol.
*   **Key Modules:**
    *   **`@artinet/sdk`** (main export): Provides core client, server, and service functionality including types, transport, utilities, and registry.
    *   **`@artinet/sdk/agents`**: Provides `artinet.v0` namespace with `taskManager`, `connect`, and `agent` for sandboxed/managed agent environments.
    *   **`@artinet/sdk/deployment`**: Provides deployment utilities like `fullDeployment` and `testDeployment`.

## 2. Architecture & Core Concepts

*   **Service-Based Architecture:** The SDK is built around an A2A service layer rather than direct server classes:
    *   **`A2AService`**: Core service implementation that handles A2A protocol methods
    *   **`A2AEngine`**: Type alias for `ExecutionEngine<Command, Update>` - the core user logic interface (async generator function)
    *   **`createAgentServer()`**: Factory function that creates an Express-based server with A2A service integration
    *   **`ExpressAgentServer`**: Return type of `createAgentServer()` providing the actual server instance

*   **Engine Pattern:** Uses execution engines rather than task handlers:
    *   **`ExecutionEngine<TCommand, TState, TUpdate>`**: Core interface for agent logic - takes a `CoreContext` and returns an `AsyncGenerator<TUpdate, void, unknown>`
    *   **`A2AEngine`**: Specialized execution engine for A2A contexts with `Command`, `State`, and `Update` types

*   **Factory Pattern:** Services are created using factory functions with `FactoryParams`:
    *   **`createAgent(params: FactoryParams)`**: Creates A2A service instances
    *   **`FactoryParams`**: Configuration object requiring `agentCard`, `engine`, and optional managers for contexts, connections, cancellations, tasks, methods, and events

## 3. Features & Enhancements

*   **Production-Grade Server (`createAgentServer`):**
    *   Built on **Express.js** v5.1.0, providing a robust foundation.
    *   Simplifies setup: Handles JSON-RPC request/response/error handling and routing automatically.
    *   Requires an `A2AEngine` (async generator function) or `FactoryParams` for agent logic implementation.
    *   Manages task state transitions based on engine yields.
    *   Configurable Agent Card served automatically at `/.well-known/agent.json`.
    *   Integrated support for CORS configuration.
    *   Uses custom JSON-RPC middleware, not jayson server directly.

*   **Enhanced Client (`A2AClient`):**
    *   Reliable streaming support (`sendStreamingMessage`) using `eventsource-parser`.
    *   Convenience methods for capability checking (`supports`).
    *   Flexible header management for authentication (`addHeader`, `setHeaders`).
    *   Informative client-side error handling with structured error classes.
    *   Agent card caching and validation.

*   **Developer Experience:**
    *   **Strong Typing:** Comprehensive TypeScript types for the entire A2A protocol derived from JSON schemas.
    *   **Simplified APIs:** Abstracts protocol complexities for both client and server.
    *   **Structured Logging:** Integrated, configurable logging using `pino`. Defaults to `error` level, configurable via `configureLogger`.
    *   **Enhanced Context Handling:** `ExecutionContext` interface for improved parameter management.

*   **Reliability & Testing:**
    *   **High Test Coverage:** Comprehensive Jest test suite covering core logic, streaming, error handling, and edge cases.
    *   Standardized error classes (`A2AError`, `RpcError`) mapped to JSON-RPC error codes.

*   **Flexible Storage:**
    *   Pluggable `TaskStore` interface.
    *   Includes `InMemoryTaskStore` (default, for development/testing).
    *   Includes `FileStore` for basic file-based persistence in `src/utils/storage/file.ts`.

*   **Agent Registry System:**
    *   **`AgentRegistry`**: Allows multiple agents to share a common context manager.
    *   Supports dynamic agent creation and management with shared state.

*   **Code Deployment & Management:**
    *   **`artinet.v0.taskManager`**: Standard utility for agents in managed environments to interact with the host for task lifecycle management.
    *   **`artinet.v0.connect`**: Standard utility for agents in managed environments to make proxied calls to other agents or LLMs.
    *   **`artinet.v0.agent`**: Factory function for agents in managed environments to obtain a `ClientProxy` for type-safe communication.
    *   `bundler`: Utility to bundle agent code using `esbuild`.
    *   `testDeployment`: Utility to test agent deployments in a sandboxed environment.
    *   `fullDeployment`: Utility to deploy bundled agent code to the Artinet platform.

*   **Protocol Compliance:**
    *   Full implementation based on the official A2A JSON Schema.
    *   Supports core methods: `message/send`, `tasks/get`, `tasks/cancel`.
    *   Supports streaming method: `message/stream`.
    *   Supports push notification configuration methods: `tasks/pushNotificationConfig/set`, `tasks/pushNotificationConfig/get`.
    *   Supports streaming resubscription: `tasks/resubscribe`.

## 4. Technical Details

*   **Language:** TypeScript
*   **Module System:** ES Modules (ESM) (`"type": "module"` in `package.json`). Requires Node.js >= 22.0.0.
*   **Build System:** Uses `tsc` to compile TypeScript to JavaScript in the `dist` directory.
*   **Exports:** 
    *   Main SDK exports from `./dist/index.js`
    *   Agent utilities from `./dist/utils/deployment/agents.js` (accessible via `@artinet/sdk/agents`)
    *   Deployment utilities from `./dist/utils/deployment/index.js` (accessible via `@artinet/sdk/deployment`)
*   **Type Definitions:** 
    *   Main types in `dist/types/index.d.ts`
    *   Agent utility types in `dist/types/utils/deployment/agents.d.ts`
    *   Deployment types in `dist/types/utils/deployment/index.d.ts`
*   **Testing:** Jest with `ts-jest` and Node.js experimental VM modules.
*   **Linting:** ESLint with TypeScript-ESLint (Flat Config `eslint.config.js`).
*   **Core Dependencies:** `express` (^5.1.0), `jayson` (^4.2.0), `pino` (^9.6.0), `eventsource-parser` (^3.0.1), `cors` (^2.8.5), `@trpc/server` (^11.4.3), `zod` (^3.25.42).

## 5. Usage (High-Level)

*   **Server:** Use `createAgentServer()` with either:
    *   An `A2AEngine` and `AgentCard` via `FactoryParams`: `createAgentServer({ agent: { engine: myEngine, agentCard: myCard } })`
    *   A pre-built `A2AService` instance: `createAgentServer({ agent: myServiceInstance })`
*   **Client:** Instantiate `A2AClient` with the server's A2A endpoint URL. Use methods like `sendMessage`, `sendStreamingMessage`, `getTask`, `cancelTask`, `supports`.
*   **Registry:** Use `AgentRegistry` to manage multiple agents with shared context managers.

## 6. Project Goals

*   Provide a reliable, easy-to-use, and fully-typed SDK for A2A development in the Node.js ecosystem.
*   Offer a complete and production-oriented solution with service-based architecture.
*   Encourage adoption of the A2A standard by lowering the barrier to implementation.
*   Support both standalone and managed deployment environments through comprehensive utilities.
